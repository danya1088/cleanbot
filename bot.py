
import asyncio
import os
import csv
from datetime import datetime, timedelta
import pytz
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))
PHONE_NUMBER = os.getenv("PHONE_NUMBER", "0000000000")
BANK_NAME = os.getenv("BANK_NAME", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class OrderStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_transfer = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_payment_proof = State()

products = {
    "üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞": 100,
    "üóëÔ∏è 2-3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞": 200,
    "üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä": 400
}

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="show_instruction")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/YOUR_ADMIN_USERNAME")]
        ]
    )
    await message.answer("üìç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —É–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞!")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()
    
@dp.callback_query(F.data == "show_instruction")
async def show_instruction(callback: CallbackQuery):
    instruction_text = (
        "üöÄ –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n\n"
        "1Ô∏è‚É£ –í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç:\n"
        "- –ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.\n"
        "- –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞ (–æ–¥–∏–Ω –ø–∞–∫–µ—Ç, –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤ –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä).\n\n"
        "2Ô∏è‚É£ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –º—É—Å–æ—Ä–∞:\n"
        "- ‚úÖ –ú—É—Å–æ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∑–∞ –¥–≤–µ—Ä—å ‚Äî –∫—É—Ä—å–µ—Ä –ø—Ä–æ—Å—Ç–æ –∑–∞–±–µ—Ä—ë—Ç –µ–≥–æ.\n"
        "- üö™ –ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∏ –∑–∞–±–µ—Ä—ë—Ç –ª–∏—á–Ω–æ ‚Äî –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–º–∞.\n\n"
        "3Ô∏è‚É£ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n"
        "- ‚úÖ –°–µ–≥–æ–¥–Ω—è ‚Äî –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "- üìÖ –ó–∞–≤—Ç—Ä–∞ ‚Äî –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n\n"
        "4Ô∏è‚É£ –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n"
        "- –£–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∫–æ–¥ –æ—Ç –¥–æ–º–æ—Ñ–æ–Ω–∞.\n\n"
        "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞:\n"
        "- –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –º—É—Å–æ—Ä–∞.\n"
        "- –û–±—â–∏–π –≤–µ—Å –∫—Ä—É–ø–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ ‚Äî –¥–æ 30 –∫–≥.\n"
        "- –î–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "6Ô∏è‚É£ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É—Å–ª—É–≥—É:\n"
        "- –ú—ã —É–∫–∞–∂–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "- –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.\n\n"
        "7Ô∏è‚É£ –ö—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º—É—Å–æ—Ä:\n"
        "- –ö—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "- –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ '–ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω.' –∏ üöÆ '–ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω.'"
    )
    await callback.message.answer(instruction_text)
    await callback.answer()

@dp.callback_query(F.data == "new_order")
async def new_order(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=product, callback_data=f"product_{product}")]
            for product in products.keys()
        ]
    )
    await callback.message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_product)

@dp.callback_query(F.data.startswith("product_"))
async def choose_product(callback: CallbackQuery, state: FSMContext):
    product = callback.data.split("_", 1)[1]
    await state.update_data(product=product)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞ –¥–≤–µ—Ä—å", callback_data="transfer_door"),
                InlineKeyboardButton(text="üö™ –ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è", callback_data="transfer_up")
            ]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –º—É—Å–æ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_transfer)

@dp.callback_query(F.data.startswith("transfer_"))
async def choose_transfer(callback: CallbackQuery, state: FSMContext):
    transfer_method = "–í—ã—Å—Ç–∞–≤–ª–µ–Ω –∑–∞ –¥–≤–µ—Ä—å" if "door" in callback.data else "–ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è"
    await state.update_data(transfer=transfer_method)

    today = datetime.now().strftime("%d.%m.%Y")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data=f"date_{today}")],
            [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data=f"date_{tomorrow}")]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_date)

@dp.callback_query(F.data.startswith("date_"))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    chosen_date = callback.data.split("_", 1)[1]
    await state.update_data(date=chosen_date)

    now = datetime.now(pytz.timezone("Europe/Moscow"))
    today = now.strftime("%d.%m.%Y")

    if chosen_date == today:
        current_hour = now.hour
        time_slots = [f"{h}:00" for h in range(max(8, current_hour + 1), 21)]
    else:
        time_slots = [f"{h}:00" for h in range(8, 21)]

    slot_counts = {slot: 0 for slot in time_slots}
    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            rows = list(csv.reader(f))
            for row in rows[1:]:
                if row and row[4] in slot_counts and row[3] == chosen_date:
                    slot_counts[row[4]] += 1
    except FileNotFoundError:
        pass

    available_slots = [slot for slot, count in slot_counts.items() if count < 15]
    if not available_slots:
        await callback.message.answer(f"‚ùå –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ {chosen_date} –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=slot, callback_data=f"time_{slot}")] for slot in available_slots
        ]
    )
    await callback.message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_time)

@dp.callback_query(F.data.startswith("time_"))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    time_chosen = callback.data.split("_", 1)[1]
    await state.update_data(time=time_chosen)
    await callback.message.answer("üìç –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–æ–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await state.set_state(OrderStates.waiting_for_address)

@dp.message(OrderStates.waiting_for_address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞:")
    await state.set_state(OrderStates.waiting_for_photo)

@dp.message(OrderStates.waiting_for_photo, F.photo)
async def photo_step(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    data = await state.get_data()
    product = data.get("product")
    price = products.get(product, 0)

    await message.answer(
    f"""üí≥ –û–ø–ª–∞—Ç–∞: <b>{price}</b> —Ä—É–±.
–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä <b>{PHONE_NUMBER}</b> ({BANK_NAME}).
üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.""",
    parse_mode="HTML"
)
    await state.set_state(OrderStates.waiting_for_payment_proof)

@dp.message(OrderStates.waiting_for_payment_proof, F.photo)
async def payment_proof(message: Message, state: FSMContext):
    proof_id = message.photo[-1].file_id
    data = await state.get_data()

    caption = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üßæ –£—Å–ª—É–≥–∞: {data.get('product')}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('date')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data.get('time')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    )

    await bot.send_photo(GROUP_CHAT_ID, photo=proof_id, caption=caption)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ö—É—Ä—å–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä.")
    await state.clear()

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
async def webhook_handler(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

# üîÑ –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(app):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)

# üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
app.router.add_post("/webhook", webhook_handler)
app.on_startup.append(on_startup)

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    web.run_app(app, port=PORT)
