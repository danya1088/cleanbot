import os
import logging
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
BANK_NAME = os.getenv("BANK_NAME")

bot = Bot(token=TOKEN)
dp = Dispatcher()

products = {
    "üóë –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞": 100,
    "üßπ 2-3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞": 200,
    "ü™µ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä": 400
}

class OrderStates(StatesGroup):
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_time = State()
    waiting_for_payment_proof = State()

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"choose_{name}")]
            for name in products
        ]
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ —É–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞! ‚ôªÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )
    await state.clear()

@dp.callback_query(F.data.startswith("choose_"))
async def choose_product(callback: types.CallbackQuery, state: FSMContext):
    product_name = callback.data.split("_", 1)[1]
    await state.update_data(product=product_name)
    await callback.message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –≤–∫–ª—é—á–∞—è:\n"
        "- —É–ª–∏—Ü—É\n- –¥–æ–º, –∫–æ—Ä–ø—É—Å\n- –ø–æ–¥—ä–µ–∑–¥\n- –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞\n- —ç—Ç–∞–∂\n- –∫–≤–∞—Ä—Ç–∏—Ä—É"
    )
    await state.set_state(OrderStates.waiting_for_address)
    await callback.answer()

@dp.message(OrderStates.waiting_for_address)
async def address_step(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞:")
    await state.set_state(OrderStates.waiting_for_photo)

@dp.message(OrderStates.waiting_for_photo, F.photo)
async def photo_step(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    current_hour = now.hour

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    time_slots = [f"{h}:00" for h in range(max(8, current_hour + 1), 21)]
    slot_limit = 15
    slot_counts = {slot: 0 for slot in time_slots}

    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            rows = list(csv.reader(f))
            for row in rows[1:]:
                if row and row[4] in slot_counts:
                    slot_counts[row[4]] += 1
    except FileNotFoundError:
        pass

    available_slots = [slot for slot, count in slot_counts.items() if count < slot_limit]

    if not available_slots:
        await message.answer("‚ùå –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=slot, callback_data=f"time_{slot}")]
            for slot in available_slots
        ]
    )
    await message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏ (–ø–æ –ú–°–ö):", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_time)

@dp.callback_query(F.data.startswith("time_"))
async def choose_time(callback: types.CallbackQuery, state: FSMContext):
    time_chosen = callback.data.split("_", 1)[1]
    await state.update_data(time=time_chosen)
    data = await state.get_data()
    product = data["product"]
    price = products[product]

    await callback.message.answer(
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{price}‚ÇΩ</b> –Ω–∞ –Ω–æ–º–µ—Ä <b>{PHONE_NUMBER}</b> ({BANK_NAME})\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.waiting_for_payment_proof)
    await callback.answer()

@dp.message(OrderStates.waiting_for_payment_proof, F.photo)
async def payment_proof_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = message.from_user

    order_id = datetime.now().strftime("%Y%m%d%H%M%S")
    data["order_id"] = order_id
    data["status"] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"

    await bot.send_photo(
        chat_id=GROUP_CHAT_ID,
        photo=message.photo[-1].file_id,
        caption=(
            f"üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
            f"–£—Å–ª—É–≥–∞: {data['product']}\n"
            f"–ê–¥—Ä–µ—Å: {data['address']}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:"
        ),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{order_id}")],
                [InlineKeyboardButton("‚úÖ –ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–ª–∏", callback_data=f"status_taken_{order_id}")],
                [InlineKeyboardButton("üöÆ –ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—Å–∏–ª–∏", callback_data=f"status_disposed_{order_id}")]
            ]
        )
    )

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ, –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä–µ—Ç –º—É—Å–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dp.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    await callback.message.edit_caption(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–∑–∞–∫–∞–∑ #{order_id})")
    await bot.send_message(callback.from_user.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")

@dp.callback_query(F.data.startswith("status_taken_"))
async def status_taken(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    await callback.message.edit_caption(f"‚úÖ –ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω (–∑–∞–∫–∞–∑ #{order_id})")
    await bot.send_message(callback.from_user.id, f"‚úÖ –ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order_id}.")

@dp.callback_query(F.data.startswith("status_disposed_"))
async def status_disposed(callback: types.CallbackQuery):
    order_id = callback.data.split("_")[2]
    await callback.message.edit_caption(f"üöÆ –ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω (–∑–∞–∫–∞–∑ #{order_id})")
    await bot.send_message(callback.from_user.id, f"üöÆ –ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order_id}.")

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
async def send_daily_report():
    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            rows = list(csv.reader(f))
            if len(rows) <= 1:
                await bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±—ã–ª–æ.")
                return

            today = datetime.now(pytz.timezone("Europe/Moscow")).date()
            filtered = [row for row in rows[1:] if row and row[0][:8] == today.strftime("%Y%m%d")]

            if not filtered:
                await bot.send_message(chat_id=GROUP_CHAT_ID, text="üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±—ã–ª–æ.")
                return

            report = f"üìã –û—Ç—á—ë—Ç –∑–∞ {today.strftime('%d.%m.%Y')}\n\n"
            for row in filtered:
                report += (
                    f"üì¶ –ó–∞–∫–∞–∑ #{row[0]}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row[1]}\n"
                    f"–£—Å–ª—É–≥–∞: {row[2]}\n"
                    f"–ê–¥—Ä–µ—Å: {row[3]}\n"
                    f"–í—Ä–µ–º—è: {row[4]}\n\n"
                )

            await bot.send_message(chat_id=GROUP_CHAT_ID, text=report.strip())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

def setup_scheduler():
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_daily_report, "cron", hour=21, minute=30)
    scheduler.start()

# Webhook –∏ –∑–∞–ø—É—Å–∫
async def handle_webhook(request):
    body = await request.read()
    update = types.Update.model_validate_json(body.decode())
    await dp.feed_update(bot, update)
    return web.Response()

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    setup_scheduler()

app = web.Application()
app.router.add_post("/", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    web.run_app(app, port=10000)
