import os
import logging
import csv
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.session.middlewares.request_logging import logger_middleware

from datetime import datetime, timedelta
import asyncio
import logging
import csv
import os
import pytz

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
BANK_NAME = os.getenv("BANK_NAME")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –†–æ—É—Ç–µ—Ä
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_transfer = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_payment_proof = State()

products = {
    "üëã –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞": 100,
    "üßµ 2-3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞": 200,
    "üõãÔ∏è –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä": 400
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ state)
    if not user_data.get("is_old_user"):
        await state.update_data(is_old_user=True)
        await show_instruction(message)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÑ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")],
                [InlineKeyboardButton(text="üîπ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="show_instruction")],
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/danya1088")]
            ]
        )
        await message.answer(
            "üìç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —É–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    await state.clear()

# –ü–æ–∫–∞–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def show_instruction(message: types.Message):
    instruction_text = (
        "üöÄ –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n\n"
        "1‚É£Ô∏è –í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç:\n"
        "- –ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.\n"
        "- –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞ (1 –ø–∞–∫–µ—Ç, 2-3 –ø–∞–∫–µ—Ç–∞, –∫—Ä—É–ø–Ω—ã–π).\n\n"
        "2‚É£Ô∏è –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏:\n"
        "- ‚úÖ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞ –¥–≤–µ—Ä—å.\n"
        "- üõãÔ∏è –ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∏ –∑–∞–±–µ—Ä—ë—Ç.\n\n"
        "3‚É£Ô∏è –í—ã–±–∏—Ä–∞–µ—Ç–µ –¥–∞—Ç—É:\n"
        "- ‚úÖ –°–µ–≥–æ–¥–Ω—è.\n"
        "- üóìÔ∏è –ó–∞–≤—Ç—Ä–∞.\n\n"
        "4‚É£Ô∏è –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n"
        "- –£–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å.\n"
        "- –ü–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞.\n"
        "- –ö–æ–¥ –æ—Ç –¥–æ–º–æ—Ñ–æ–Ω–∞.\n\n"
        "5‚É£Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ:\n"
        "- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö.\n"
        "- –î–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –¥–æ 30 –∫–≥, —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º.\n\n"
        "6‚É£Ô∏è –û–ø–ª–∞—Ç–∞:\n"
        "- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä.\n"
        "- –°–∫—Ä–∏–Ω —á–µ–∫–∞.\n\n"
        "7‚É£Ô∏è –ö—É—Ä—å–µ—Ä:\n"
        "- –ó–∞–±–µ—Ä—ë—Ç.\n"
        "- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ '–ó–∞–±—Ä–∞–ª.' üöΩ '–í—ã–±—Ä–æ—à–µ–Ω.'"
    )
    await message.answer(instruction_text)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ Telegram-–±–æ—Ç–∞

# –•–µ–Ω–¥–ª–µ—Ä –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –º—É—Å–æ—Ä–∞
@dp.callback_query(F.data.startswith("transfer_"))
async def choose_transfer(callback: types.CallbackQuery, state: FSMContext):
    transfer_method = "–í—ã—Å—Ç–∞–≤–ª–µ–Ω –∑–∞ –¥–≤–µ—Ä—å" if "door" in callback.data else "–ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è"
    await state.update_data(transfer=transfer_method)

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    today = datetime.now().strftime("%d.%m.%Y")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data=f"date_{today}")],
            [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data=f"date_{tomorrow}")]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("date_"))
async def choose_date(callback: types.CallbackQuery, state: FSMContext):
    chosen_date = callback.data.split("_", 1)[1]
    await state.update_data(date=chosen_date)

    now = datetime.now(pytz.timezone("Europe/Moscow"))
    today = now.strftime("%d.%m.%Y")
    tomorrow = (now + timedelta(days=1)).strftime("%d.%m.%Y")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if chosen_date == today:
        current_hour = now.hour
        time_slots = [f"{h}:00" for h in range(max(8, current_hour + 1), 21)]
    else:
        time_slots = [f"{h}:00" for h in range(8, 21)]

    slot_limit = 15
    slot_counts = {slot: 0 for slot in time_slots}

    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            rows = list(csv.reader(f))
            for row in rows[1:]:
                if row and row[4] in slot_counts and row[3] == chosen_date:
                    slot_counts[row[4]] += 1
    except FileNotFoundError:
        pass

    available_slots = [slot for slot, count in slot_counts.items() if count < slot_limit]

    if not available_slots:
        await callback.message.answer(f"‚ùå –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ {chosen_date} –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=slot, callback_data=f"time_{slot}")]
            for slot in available_slots
        ]
    )
    await callback.message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_time)


@dp.callback_query(F.data.startswith("time_"))
async def choose_time(callback: types.CallbackQuery, state: FSMContext):
    time_chosen = callback.data.split("_", 1)[1]
    await state.update_data(time=time_chosen)

    await callback.message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å, –≤–∫–ª—é—á–∞—è:\n"
        "- —É–ª–∏—Ü—É\n- –¥–æ–º, –∫–æ—Ä–ø—É—Å\n- –ø–æ–¥—ä–µ–∑–¥\n- –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞\n- —ç—Ç–∞–∂\n- –∫–≤–∞—Ä—Ç–∏—Ä—É"
    )
    await state.set_state(OrderStates.waiting_for_address)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ –∏ –ø–ª–∞—Ç–µ–∂–µ–π

@dp.message(OrderStates.waiting_for_photo, F.photo)
async def photo_step(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)

    data = await state.get_data()
    product = data.get("product")

    if product == "üîπ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/danya1088")]
            ]
        )
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            reply_markup=keyboard
        )

    price = products[product]
await message.answer(
    f"üßæ –û–ø–ª–∞—Ç–∞: <b>{price}</b> —Ä—É–±.\n"
    f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä <b>{PHONE_NUMBER}</b> ({BANK_NAME}).\n\n"
    "üí¨ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
    parse_mode="HTML"
)

@dp.message(OrderStates.waiting_for_payment_proof, F.photo)
async def payment_proof(message: types.Message, state: FSMContext):
    proof_id = message.photo[-1].file_id
    data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞
    caption = (
        "üìÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
        f"–¢–æ–≤–∞—Ä: {data.get('product')}\n"
        f"–î–∞—Ç–∞: {data.get('date')}\n"
        f"–í—Ä–µ–º—è: {data.get('time')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"<b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>"
    )
    await bot.send_photo(GROUP_CHAT_ID, photo=proof_id, caption=caption, parse_mode="HTML")

    await message.answer(
        "üöö –°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. \n–ö—É—Ä—å–µ—Ä –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä."
    )
    await state.clear()


@dp.message(OrderStates.waiting_for_address, F.text)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞:")
    await state.set_state(OrderStates.waiting_for_photo)

# –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(F.data.startswith("status_taken_"))
async def status_taken(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await bot.send_message(user_id, "‚úÖ –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –º—É—Å–æ—Ä. –°–ø–∞—Å–∏–±–æ!")
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –º—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω")

@dp.callback_query(F.data.startswith("status_disposed_"))
async def status_disposed(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await bot.send_message(user_id, "üöÆ –ú—É—Å–æ—Ä —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –º—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
from apscheduler.schedulers.asyncio import AsyncIOScheduler
scheduler = AsyncIOScheduler()
scheduler.start()

@scheduler.scheduled_job("cron", hour=21, minute=30)
async def send_daily_report():
    try:
        if os.path.exists("orders.csv"):
            with open("orders.csv", "r", encoding="utf-8") as f:
                lines = f.readlines()
            if len(lines) > 1:
                report_text = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n" + "\n".join(lines[1:])
            else:
                report_text = "‚ÑπÔ∏è –ó–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ."
        else:
            report_text = "‚ö†Ô∏è –§–∞–π–ª orders.csv –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await bot.send_message(GROUP_CHAT_ID, report_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
