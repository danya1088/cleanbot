
import asyncio
import os
import csv
from datetime import datetime, timedelta
import pytz
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))
PHONE_NUMBER = os.getenv("PHONE_NUMBER", "0000000000")
BANK_NAME = os.getenv("BANK_NAME", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class OrderStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_transfer = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_payment_proof = State()
    waiting_for_large_description = State()
    waiting_for_large_photos = State()


products = {
    "üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞": 100,
    "üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞": 200,
    "üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä": 500
}

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="show_instruction")],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/danya1088")]
        ]
    )
    await message.answer("üìç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —É–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞!")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data == "show_instruction")
async def show_instruction(callback: CallbackQuery):
    instruction_text = (
        "üöÄ –ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n\n"
        "1Ô∏è‚É£ –í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç:\n"
        "- –ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.\n"
        "- –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞:\n"
        "    ‚Ä¢ üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç ‚Äî 100 ‚ÇΩ\n"
        "    ‚Ä¢ üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ ‚Äî 200 ‚ÇΩ\n"
        "    ‚Ä¢ üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä (–¥–æ 30 –∫–≥) ‚Äî 500 ‚ÇΩ\n"
        "2Ô∏è‚É£ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –º—É—Å–æ—Ä–∞:\n"
        "- ‚úÖ –ú—É—Å–æ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –∑–∞ –¥–≤–µ—Ä—å ‚Äî –∫—É—Ä—å–µ—Ä –ø—Ä–æ—Å—Ç–æ –∑–∞–±–µ—Ä—ë—Ç –µ–≥–æ.\n"
        "- üö™ –ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∏ –∑–∞–±–µ—Ä—ë—Ç –ª–∏—á–Ω–æ ‚Äî –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–º–∞.\n\n"
        "3Ô∏è‚É£ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:\n"
        "- ‚úÖ –°–µ–≥–æ–¥–Ω—è ‚Äî –∫—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "- üìÖ –ó–∞–≤—Ç—Ä–∞ ‚Äî –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n\n"
        "4Ô∏è‚É£ –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å:\n"
        "- –£–ª–∏—Ü–∞, –¥–æ–º, –∫–æ—Ä–ø—É—Å, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∫–æ–¥ –æ—Ç –¥–æ–º–æ—Ñ–æ–Ω–∞.\n\n"
        "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞:\n"
        "- –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –º—É—Å–æ—Ä–∞.\n"
        "- –û–±—â–∏–π –≤–µ—Å –∫—Ä—É–ø–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ ‚Äî –¥–æ 30 –∫–≥.\n"
        "- –î–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "6Ô∏è‚É£ –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É—Å–ª—É–≥—É:\n"
        "- –ú—ã —É–∫–∞–∂–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "- –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.\n\n"
        "7Ô∏è‚É£ –ö—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º—É—Å–æ—Ä:\n"
        "- –ö—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "- –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ '–ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–Ω.' –∏ üöÆ '–ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω.'"
    )

    continue_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="new_order")]
        ]
    )

    await callback.message.answer(instruction_text, reply_markup=continue_keyboard)
    await callback.answer()

@dp.callback_query(F.data == "new_order")
async def new_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞ ‚Äî 100 ‚ÇΩ", callback_data="product_üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞")],
            [InlineKeyboardButton(text="üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞ ‚Äî 200 ‚ÇΩ", callback_data="product_üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞")],
            [InlineKeyboardButton(text="üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä (–¥–æ 30 –∫–≥) ‚Äî 500 ‚ÇΩ", callback_data="product_üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üìã –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")],
                [InlineKeyboardButton(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é", callback_data="show_instruction")]
            ]
        )
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("product_"))
async def choose_product(callback: CallbackQuery, state: FSMContext):
    product = callback.data.split("_", 1)[1]

    if product == "üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä":
        await state.update_data(product=product)
        await callback.message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–Ω–µ—Å—Ç–∏ (—Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Ä–∞–∑–º–µ—Ä, –≤–µ—Å):")
        await state.set_state(OrderStates.waiting_for_large_description)
        return  # <== –û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –¥–∞–ª—å—à–µ –∫–æ–¥ –ù–ï –î–û–õ–ñ–ï–ù –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    await state.update_data(product=product)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞ –¥–≤–µ—Ä—å", callback_data="transfer_door"),
                InlineKeyboardButton(text="üö™ –ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è", callback_data="transfer_up")
            ]
        ]
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –º—É—Å–æ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_transfer)

@dp.message(OrderStates.waiting_for_large_description)
async def get_large_description(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(large_description=text, photos=[])
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\nüì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ –∫—Ä—É–ø–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞.")
    await state.set_state(OrderStates.waiting_for_photo)

@dp.callback_query(F.data.startswith("transfer_"))
async def choose_transfer(callback: CallbackQuery, state: FSMContext):
    transfer_method = "–í—ã—Å—Ç–∞–≤–ª–µ–Ω –∑–∞ –¥–≤–µ—Ä—å" if "door" in callback.data else "–ö—É—Ä—å–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è"
    await state.update_data(transfer=transfer_method, contact_method=transfer_method)
    await callback.answer()

    today = datetime.now().strftime("%d.%m.%Y")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"‚úÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data=f"date_{today}")],
            [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data=f"date_{tomorrow}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_product")]
        ]
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_date)

@dp.callback_query(F.data == "back_to_product")
async def back_to_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞ ‚Äî 100 ‚ÇΩ", callback_data="product_üß∫ –û–¥–∏–Ω –ø–∞–∫–µ—Ç –º—É—Å–æ—Ä–∞")],
                [InlineKeyboardButton(text="üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞ ‚Äî 200 ‚ÇΩ", callback_data="product_üóëÔ∏è 2‚Äì3 –ø–∞–∫–µ—Ç–∞ –º—É—Å–æ—Ä–∞")],
                [InlineKeyboardButton(text="üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä (–¥–æ 30 –∫–≥) ‚Äî 500 ‚ÇΩ", callback_data="product_üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        )
    )
    await callback.answer()

    # üîµ –ê —É–∂–µ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_date)

@dp.callback_query(F.data.startswith("date_"))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    chosen_date = callback.data.split("_", 1)[1]
    await state.update_data(date=chosen_date)

    now = datetime.now(pytz.timezone("Europe/Moscow"))
    today = now.strftime("%d.%m.%Y")

    if chosen_date == today:
        current_hour = now.hour
        time_slots = [f"{h}:00" for h in range(max(8, current_hour + 1), 21)]
    else:
        time_slots = [f"{h}:00" for h in range(8, 21)]

    slot_counts = {slot: 0 for slot in time_slots}
    try:
        with open("orders.csv", "r", encoding="utf-8") as f:
            rows = list(csv.reader(f))
            for row in rows[1:]:
                if row and row[4] in slot_counts and row[3] == chosen_date:
                    slot_counts[row[4]] += 1
    except FileNotFoundError:
        pass

    available_slots = [slot for slot, count in slot_counts.items() if count < 15]
    if not available_slots:
        await callback.message.answer(f"‚ùå –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ {chosen_date} –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=slot, callback_data=f"time_{slot}")] for slot in available_slots
        ]
    )
    await callback.message.answer("üïê –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_time)

@dp.callback_query(F.data.startswith("time_"))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    time_chosen = callback.data.split("_", 1)[1]
    await state.update_data(time_slot=time_chosen)
    await callback.message.answer("üìç –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–æ–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await state.set_state(OrderStates.waiting_for_address)
    await callback.answer()

from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

today = datetime.now().strftime("%d.%m.%Y")
tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")

keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data=f"date_{today}")],
        [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data=f"date_{tomorrow}")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_product")]
    ]
)

@dp.message(OrderStates.waiting_for_address)
async def get_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if len(address) < 5:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return

    await state.update_data(address=address)

    await message.answer("üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞.")
    await state.set_state(OrderStates.waiting_for_photo)

@dp.message(OrderStates.waiting_for_photo)
async def photo_step(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–∞.")
        return

    data = await state.get_data()
    product = data.get("product")
    photos = data.get("photos", [])

    if not product or product not in products:
        await message.answer("‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ª—É–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    photos.append(photo_id)
    await state.update_data(photos=photos)

    if product == "üõ¢ –ö—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä":
        if len(photos) < 2:
            await message.answer(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –º–∏–Ω–∏–º—É–º {2 - len(photos)}.")
            return

        desc = data.get("large_description", "‚Äî")
        caption = (
            f"üõ¢ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä—É–ø–Ω—ã–π –º—É—Å–æ—Ä</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
            f"üïê –ó–∞—è–≤–∫–∞ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞."
        )

        media = [types.InputMediaPhoto(media=pid) for pid in photos[:10]]
        if media:
            media[0].caption = caption
            media[0].parse_mode = "HTML"
            await bot.send_media_group(chat_id=GROUP_CHAT_ID, media=media)
        else:
            await bot.send_message(GROUP_CHAT_ID, caption, parse_mode="HTML")

        await message.answer("üì® –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏.")
        await state.clear()
        return

    # –æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    price = products[product]
    await state.update_data(price=price)

    await message.answer(
        f"üí≥ –û–ø–ª–∞—Ç–∞: <b>{price} ‚ÇΩ</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä <b>{PHONE_NUMBER}</b> ({BANK_NAME}).\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.",
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.waiting_for_payment_proof)

@dp.message(F.photo, StateFilter(FSMFillForm.waiting_for_receipt))
async def process_receipt(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        admin_chat_id = int(os.getenv("GROUP_CHAT_ID", "-1001234567890"))  # –ó–∞–º–µ–Ω–∏—Ç–µ ID –Ω–∞ —Å–≤–æ–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_id = message.photo[-1].file_id
        await state.update_data(receipt_photo=file_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        caption = (
            f"üßæ –ù–æ–≤—ã–π —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n"
            f"üÜî –ó–∞—è–≤–∫–∞: {data.get('order_id', '‚ùì')}\n"
            f"üí≥ –°—É–º–º–∞: {data.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name}"
        )
        await bot.send_photo(chat_id=admin_chat_id, photo=file_id, caption=caption)

        # –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        await message.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.set_state(FSMFillForm.waiting_for_admin_confirmation)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}")
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
async def webhook_handler(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

# üîÑ –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(app):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)

# üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
app.router.add_post("/webhook", webhook_handler)
app.on_startup.append(on_startup)

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])

    await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ö—É—Ä—å–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞–±–µ—Ä—ë—Ç –º—É—Å–æ—Ä.")
    await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    status_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ú—É—Å–æ—Ä –∑–∞–±—Ä–∞–ª–∏", callback_data=f"pickedup_{user_id}")],
            [InlineKeyboardButton(text="üöÆ –ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω", callback_data=f"dumped_{user_id}")]
        ]
    )

    await callback.message.answer("üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=status_keyboard)

@dp.callback_query(F.data.startswith("pickedup_"))
async def picked_up(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await bot.send_message(user_id, "‚úÖ –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –º—É—Å–æ—Ä.")
    await callback.answer("–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –º—É—Å–æ—Ä –∑–∞–±—Ä–∞–ª–∏.")

@dp.callback_query(F.data.startswith("dumped_"))
async def dumped(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await bot.send_message(user_id, "üöÆ –ú—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")
    await callback.answer("–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –º—É—Å–æ—Ä –≤—ã–±—Ä–æ—à–µ–Ω.")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    web.run_app(app, port=PORT)
